" Install Plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" Make vim slightly more IDEish
Plug 'ayu-theme/ayu-vim'
Plug 'benmills/vimux'
Plug 'benmills/vimux-golang'
Plug 'vim-airline/vim-airline'
Plug 'dense-analysis/ale'

" General vim improvements
Plug 'airblade/vim-rooter'
Plug 'arp242/undofile_warn.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/vim-peekaboo'
Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" Git helpers
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'

" Config files
Plug 'cespare/vim-toml'
Plug 'elzr/vim-json'
Plug 'stephpy/vim-yaml'

" Ruby/Rails
Plug 'vim-ruby/vim-ruby'
Plug 'pgr0ss/vimux-ruby-test'
Plug 'rhysd/vim-textobj-ruby'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rails'

" Text editing
Plug 'marshallward/vim-restructuredtext'
Plug 'mustache/vim-mustache-handlebars'

" Devops related-language
Plug 'chr4/nginx.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'hashivim/vim-terraform'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'modille/groovy.vim'
Plug 'wgwoods/vim-systemd-syntax'

" Front-end stuff
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'

" Initialize plugin system
call plug#end()

" Setup colors
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif
" Set italics
set t_ZH=[3m
set t_ZR=[23m

let ayucolor="dark"   " for dark version of theme
colorscheme ayu
" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
    set t_Co=16
endif

" ALE: only run what I specifically ask for
let g:ale_linters_explicit = 1

let g:ale_linters = {
            \   'go': ['gopls', 'golangci-lint'],
            \   'Dockerfile': ['hadolint'],
            \   'javascript': ['prettier'],
            \   'typescript': ['prettier'],
            \   'ruby': ['ruby', 'rubocop'],
            \   'sh': ['shellcheck']
            \ }

let g:ale_fixers = {
            \   '*': ['remove_trailing_lines', 'trim_whitespace'],
            \   'go': ['goimports'],
            \   'markdown': ['prettier'],
            \   'javascript': ['prettier'],
            \   'typescript': ['prettier'],
            \   'python': ['black'],
            \   'ruby': ['rubocop'],
            \   'sh': ['shfmt'],
            \ }
            " \   'json': ['prettier'],
let g:ale_fix_on_save = 1
command! ALEToggleFixer execute "let g:ale_fix_on_save = get(g:, 'ale_fix_on_save', 0) ? 0 : 1"

let g:ale_go_goimports_options = "-local github.robot.car"
let g:ale_go_golangci_lint_options = ""
let g:ale_go_golangci_lint_package = 1

let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc
nnoremap [a <Plug>(ale_previous_wrap)
nnoremap ]a <Plug>(ale_next_wrap)

" Statusline
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1
" let g:airline_section_a = ''
let g:airline_section_b = '%{FugitiveHead()}'
let g:airline_section_c = '%m%r'
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline_section_z = '%l:%c'

"Vim-Rooter
let g:rooter_silent_chdir = 1

" Signify
let g:signify_vcs_list = [ 'git' ]

" Autopairs
let g:AutoPairsMapSpace = 0

" Markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'ruby']
let g:markdown_folding = 1

" Ruby
let ruby_fold = 1
let ruby_foldable_groups = 'def class module'

"Prevent setting conceal
let g:vim_json_syntax_conceal = 0

" Terraform
" Prevent fmt on save because ale does it
let g:terraform_fmt_on_save=1

"""""
" Key bindings
"""""
" Let :W also save because my fingers are lazy
command! -bar -nargs=* -complete=file -range=% -bang W         <line1>,<line2>write<bang> <args>
" change the leader key from "\" to the space bar
let mapleader="\<SPACE>"

" Alternate way to exit insert mode
inoremap jk <Esc>

" Quick way out of all buffers when, e.g., using merge tool
nnoremap <leader>q :qa<CR>
" Shortcut to edit THIS configuration file and automatically reload it
nnoremap <silent> <leader>ec :e $MYVIMRC<CR>
" Close current buffer
nnoremap <silent> <leader>w :bd<cr>
" Copy/paste to clipboard using reindent helpers
vnoremap <leader>y "+y
nmap <leader>p "+p`[v`]=
nmap <leader>P "+<Plug>unimpairedPutAbove =']
" Disable arrow keys in normal mode
nnoremap <Left> <nop>
nnoremap <Right> <nop>
nnoremap <Up> <nop>
nnoremap <Down> <nop>

" Make yank work like other capital letters
nnoremap Y y$

" Add fast skip down the page
nnoremap <C-u> 10jzz
nnoremap <C-i> 10kzz
" Make Q start macro mode and disable q because lazy fingers
nnoremap Q q
nnoremap q <nop>
" Easier movement between splits following vim-unimpaired
nnoremap [s <C-W>W
nnoremap ]s <C-W>w
nnoremap <leader><leader> :b#<CR>
" File selection
nnoremap <silent> <leader>e :Explore<cr>
" Unfold a section
nnoremap <leader>f zO

" Vimux runner
nnoremap <leader>vp  :VimuxPromptCommand<CR>
nnoremap <leader>vc  :VimuxCloseRunner<CR>
nnoremap <leader>vr  :VimuxRunLastCommand<CR>

" Toggle quicklist
" https://vim.fandom.com/wiki/Toggle_to_open_or_close_the_quickfix_window
command -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
  else
    execute "copen " . 10
  endif
endfunction
augroup QFixToggle
 autocmd!
 autocmd BufWinEnter quickfix let g:qfix_win = bufnr("$")
 autocmd BufWinLeave * if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win | unlet! g:qfix_win | endif
augroup END
nnoremap <silent> <leader>l :QFix<cr>

" Searching
nnoremap <leader>s :%s//g<Left><Left>
" Use ripgrep to search
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
command! -nargs=+ RipGrep execute 'silent grep! <args>' | copen 12
nnoremap <leader>g :RipGrep<space>

" Search and replace over all files in quickfix, e.g., from RipGrep
nnoremap <leader>sg :cfdo %s///g <bar> update<C-Left><C-Left><C-Left><Right><Right><Right>

"""""
" Autogroups
"""""
augroup vimrc_defaults
    autocmd!
    autocmd bufwritepost .vimrc source ~/.vimrc
augroup END

""""
" Spellcheck
" [s and ]s to move forward and back. z= for suggestions
""""
function! ToggleSpellCheck()
  setlocal spell! spelllang=en_us
  if &syntax !=# 'OFF' && &spell
      setlocal syntax=OFF
  else
      syntax enable
  endif
endfunction
nnoremap <silent> <leader>sc :call ToggleSpellCheck()<CR>

""""
" General settings
" hat tips to tpope/vim-sensible
" http://nerditya.com/code/guide-to-neovim/
"""""
set encoding=utf-8

" Allow opening new files without having to save old ones
set hidden

set splitright

" Relative numbers by default, toggle on/of or easy line selection
set relativenumber
set signcolumn=number
set cursorline

" Toggle signcolumn for easier mouse-based copy
function! SignColumnToggle()
    if &signcolumn == "number"
        setlocal signcolumn=no
    else
        setlocal signcolumn=number
    endif
    setlocal relativenumber!
endfunction
nnoremap <leader>ns :call SignColumnToggle()<cr>

set hlsearch
set incsearch
set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab
set showmatch

" Disable folding to start so everything is open
set nofoldenable

" Prevent preview window opening during autocomplete
set completeopt-=preview

set nrformats-=octal

set laststatus=2
set ruler
set wildmenu

" searching
set ignorecase          " Make searching case insensitive
set smartcase           " ... unless the query has capital letters

" Scrolling display
if !&scrolloff
    set scrolloff=1
endif
if !&sidescrolloff
    set sidescrolloff=5
endif
set display+=lastline

if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

" Joining
set formatoptions+=j " Delete comment character when joining commented lines
" set formatoptions+=o " Continue comment marker in new lines

if has('path_extra')
    setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

set autoread

set history=1000
set tabpagemax=50

if !empty(&viminfo)
    set viminfo^=!
endif
set sessionoptions-=options

" Prevent creation of .netrwhist files
let g:netrw_dirhistmax = 0
let g:netrw_liststyle = 3
let g:netrw_banner = 0


" Set default indent to 4 spaces
set tabstop=2
set shiftwidth=2
set expandtab
set shiftround

" Short updatetime time for async plugins like govim and signify
set updatetime=100

" Inspired by https://begriffs.com/posts/2019-07-19-history-use-vim.html
" Protect changes between writes.
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
" consolidate the writebackups -- not a big
" deal either way, since they usually get deleted
    set backupdir^=~/.vim/backup//
end

" persist the undo tree for each file
set undofile
set undodir^=~/.vim/undo//
